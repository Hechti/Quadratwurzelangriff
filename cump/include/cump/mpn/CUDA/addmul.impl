/* mpn::addmul -- multiply the N long limb vector pointed to by UP by
   the N' long limb vector pointed to by VP,
   add the (N+N'-1) least significant limbs of the product to the limb vector
   pointed to by RP.  Return the most significant limb of the product,
   adjusted for carry-out from the addition.

Copyright 2012 Takatoshi Nakayama.

This file is part of the CUMP Library.

The CUMP Library is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

The CUMP Library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the CUMP Library.  If not, see http://www.gnu.org/licenses/.  */


#include "../../longlong.cuh"


#if CUMP_NAIL_BITS == 0

template <int  N, CUMP_3_PTRTYPES>
CUMP_FUNCTYPE
mp_limb_t  addmul (mp_ptr(1)  rp, mp_srcptr(2)  up, mp_size_t  n, mp_srcptr(3)  vp)
{
  mp_limb_t  vl [N];
  mp_limb_t  ul, cl [N], hpl, lpl, rl;

  ASSERT (n >= 1);
  ASSERT (CUMPN_SAME_OR_SEPARATE_P (rp, up, n));

  #pragma unroll
  for (int  i=0;  i<N;  i++)
    {
      vl [i] = vp [i];
      cl [i] = 0;
    }

  do
    {
      ul = *up++;
      umul_ppmm (hpl, lpl, ul, vl [0]);

      lpl += cl [0];
      cl [0] = (lpl < cl [0]) + hpl;

      rl = *rp;
      lpl += rl;
      cl [0] += lpl < rl;
      *rp++ = lpl;

      #pragma unroll
      for (int  i=1;  i<N;  i++)
        {
          umul_ppmm (hpl, lpl, ul, vl [i]);

          lpl += cl [i];
          cl [i] = (lpl < cl [i]) + hpl;

          lpl += cl [i-1];
          cl [i] += lpl < cl [i-1];
          cl [i-1] = lpl;
        }
    }
  while (--n != 0);

  #pragma unroll
  for (int  i=0;  i<N-1;  i++)
    {
      rp [i] = cl [i];
    }

  return  cl [N-1];
}

#endif

#if CUMP_NAIL_BITS == 1
#endif

#if CUMP_NAIL_BITS >= 2
#endif
