/* mpf_mul -- Multiply two floats.

Copyright 2012 Takatoshi Nakayama.

This file is part of the CUMP Library.

The CUMP Library is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

The CUMP Library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the CUMP Library.  If not, see http://www.gnu.org/licenses/.  */


CUMP_FUNCTMPL3  void  mpf_mul (mpf_ptr(1)  r, mpf_srcptr(2)  u, mpf_srcptr(3)  v)
{
  mpf::mul (float_ptr(1) (r), float_srcptr(2) (u), float_srcptr(3) (v));
}  // mpf_mul ()


CUMP_FUNCTMPL3
void  mpf::mul (float_ptr(1)  r, float_srcptr(2)  u, float_srcptr(3)  v)
{
  mp_srcptr(2)  up;
  mp_srcptr(3)  vp;
  mp_size_t  usize, vsize;
  mp_size_t  sign_product;
  mp_size_t  prec = r._mp_prec ();
  TMP_DECL;

  TMP_MARK;
  usize = u._mp_size ();
  vsize = v._mp_size ();
  sign_product = usize ^ vsize;

  usize = ABS (usize);
  vsize = ABS (vsize);

  up = u._mp_d ();
  vp = v._mp_d ();
  if (usize > prec)
    {
      up += usize - prec;
      usize = prec;
    }
  if (vsize > prec)
    {
      vp += vsize - prec;
      vsize = prec;
    }

  if (usize == 0 || vsize == 0)
    {
      r._mp_size () = 0;
      r._mp_exp () = 0;		/* ??? */
    }
  else
    {
      mp_size_t  rsize;
      mp_limb_t  cy_limb;
      mp_ptr(1)  rp;
      mp_limb_t  *tp;
      mp_size_t  adj;

      rsize = usize + vsize;
      tp = TMP_ALLOC_LIMBS (rsize);
      cy_limb = (usize >= vsize
                 ? mpn::mul (tp, up, usize, vp, vsize)
                 : mpn::mul (tp, vp, vsize, up, usize));

      adj = cy_limb == 0;
      rsize -= adj;
      prec++;
      if (rsize > prec)
        {
          tp += rsize - prec;
          rsize = prec;
        }
      rp = r._mp_d ();
      CUMPN_COPY (rp, tp, rsize);
      r._mp_exp () = u._mp_exp () + v._mp_exp () - adj;
      r._mp_size () = sign_product >= 0 ? rsize : -rsize;
    }
  TMP_FREE;
}  // mpf::mul ()
