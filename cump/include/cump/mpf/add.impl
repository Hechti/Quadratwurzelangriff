/* mpf_add -- Add two floats.

Copyright 2012 Takatoshi Nakayama.

This file is part of the CUMP Library.

The CUMP Library is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

The CUMP Library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the CUMP Library.  If not, see http://www.gnu.org/licenses/.  */


CUMP_FUNCTMPL3  void  mpf_add (mpf_ptr(1)  r, mpf_srcptr(2)  u, mpf_srcptr(3)  v)
{
  typedef  typename utility::PointerTraits <mp_srcptr(2)>::ConstPointer  mp_srcptr2;
  typedef  typename utility::PointerTraits <mp_srcptr(3)>::ConstPointer  mp_srcptr3;
  mpf::add <true> (float_ptr(1) (r), mpf::ConstFloat <mp_srcptr2> (u), mpf::ConstFloat <mp_srcptr3> (v));
}  // mpf_add ()


template <bool  signs_are_same, CUMP_2_PTRTYPES>
CUMP_FUNCTYPE
void  mpf::add (float_ptr(1)  r, float_srcptr(2)  u, float_srcptr(2)  v)
{
  mp_srcptr(2)  up, vp;
  mp_ptr(1)  rp;
  mp_limb_t  *tp;
  mp_size_t  usize, vsize, rsize;
  mp_size_t  prec;
  mp_exp_t  uexp;
  mp_size_t  ediff;
  mp_limb_t  cy;
  int  negate;
  TMP_DECL;

  usize = u._mp_size ();
  vsize = signs_are_same ? v._mp_size () : -v._mp_size ();

  /* Handle special cases that don't work in generic code below.  */
  if (usize == 0)
    {
    set_r_v_maybe:
      if (r != v)
        mpf_set (r, v);
      return;
    }
  if (vsize == 0)
    {
      v = u;
      goto set_r_v_maybe;
    }

  /* If signs of U and V are different, perform subtraction.  */
  if (signs_are_same)
    {
      if ((usize ^ vsize) < 0)
        {
          sub <false> (r, u, v);
          return;
        }
    }

  TMP_MARK;

  /* Signs are now known to be the same.  */
  negate = usize < 0;

  /* Make U be the operand with the largest exponent.  */
  if (u._mp_exp () < v._mp_exp ())
    {
      swap (u, v);
      //mpf_srcptr t;
      //t = u; u = v; v = t;
      usize = u._mp_size ();
      vsize = v._mp_size ();
    }

  usize = ABS (usize);
  vsize = ABS (vsize);
  up = u._mp_d ();
  vp = v._mp_d ();
  rp = r._mp_d ();
  prec = r._mp_prec ();
  uexp = u._mp_exp ();
  ediff = u._mp_exp () - v._mp_exp ();

  /* If U extends beyond PREC, ignore the part that does.  */
  if (usize > prec)
    {
      up += usize - prec;
      usize = prec;
    }

  /* If V extends beyond PREC, ignore the part that does.
     Note that this may make vsize negative.  */
  if (vsize + ediff > prec)
    {
      vp += vsize + ediff - prec;
      vsize = prec - ediff;
    }

#if 0
  /* Locate the least significant non-zero limb in (the needed parts
     of) U and V, to simplify the code below.  */
  while (up[0] == 0)
    up++, usize--;
  while (vp[0] == 0)
    vp++, vsize--;
#endif

  /* Allocate temp space for the result.  Allocate
     just vsize + ediff later???  */
  tp = TMP_ALLOC_LIMBS (prec);

  if (ediff >= prec)
    {
      /* V completely cancelled.  */
      if (rp != up)
        CUMPN_COPY (rp, up, usize);
      rsize = usize;
    }
  else
    {
      /* uuuu     |  uuuu     |  uuuu     |  uuuu     |  uuuu    */
      /* vvvvvvv  |  vv       |    vvvvv  |    v      |       vv */

      if (usize > ediff)
        {
          /* U and V partially overlaps.  */
          if (vsize + ediff <= usize)
            {
              /* uuuu     */
              /*   v      */
              mp_size_t size;
              size = usize - ediff - vsize;
              CUMPN_COPY (tp, up, size);
              cy = mpn::add (tp + size, up + size, usize - size, vp, vsize);
              rsize = usize;
            }
          else
            {
              /* uuuu     */
              /*   vvvvv  */
              mp_size_t size;
              size = vsize + ediff - usize;
              CUMPN_COPY (tp, vp, size);
              cy = mpn::add (tp + size, up, usize, vp + size, usize - ediff);
              rsize = vsize + ediff;
            }
        }
      else
        {
          /* uuuu     */
          /*      vv  */
          mp_size_t size;
          size = vsize + ediff - usize;
          CUMPN_COPY (tp, vp, vsize);
          CUMPN_ZERO (tp + vsize, ediff - usize);
          CUMPN_COPY (tp + size, up, usize);
          cy = 0;
          rsize = size + usize;
        }

      CUMPN_COPY (rp, tp, rsize);
      rp[rsize] = cy;
      rsize += cy;
      uexp += cy;

    }

  r._mp_size () = negate ? -rsize : rsize;
  r._mp_exp () = uexp;
  TMP_FREE;
}  // mpf::add ()
